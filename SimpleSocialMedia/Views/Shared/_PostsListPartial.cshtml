@model IEnumerable<SimpleSocialMedia.Models.PostModel>
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<SimpleSocialMedia.Models.UserModel> UserManager;
@{
    var defaultAvatarUrl = Url.Content("~/images/default-user-pic.jpg");
    var currentUser = await UserManager.GetUserAsync(User);
    var avatarsPath = "~/uploads/avatars/";
    var isNewPostDisplay = ViewData["IsCurrentUser"] == null || (bool)ViewData["IsCurrentUser"];
}

@if (isNewPostDisplay)
{
    <div id="new-post">
    <div class="new-post-header">
        <img class="post-avatar" src="@(Url.Content(avatarsPath + currentUser.AvatarUrl) ?? defaultAvatarUrl)" alt="Avatar" onerror="this.onerror=null; this.src='@(defaultAvatarUrl)';" />
        <form id="new-post-form" class="new-post-form">
            <textarea id="new-post-content" name="content" placeholder="Введите текст..." rows="4" required></textarea>
        </form>
    </div>
    <hr class="sep" />
    <button class="new-post-button">Опубликовать</button>
</div>
}

@if (Model.Count() == 0)
{
    <div style="background-color: white; height: 80px; border-radius: 10px; display: flex; justify-content: center; align-items: center;">
        <h5 style="text-align: center;">Подпишитесь на кого-нибудь, чтобы тут были новости</h5>
    </div>
}
@foreach (var post in Model)
{
    <div class="post" data-post-id="@post.Id">
        <div class="post-header">
            <img class="post-avatar" src="@(Url.Content(avatarsPath + post.User.AvatarUrl) ?? defaultAvatarUrl)" alt="Avatar" onerror="this.onerror=null; this.src='@(defaultAvatarUrl)';" />
            <div class="post-info">
                <a class="username-link" data-user-id="@post.User.Id">
                    <span class="username">@post.User.UserName</span>
                </a>
                <span class="created-at">@post.CreatedAt.ToString("g")</span>
            </div>
            <div class="post-menu">
                <button class="post-menu-button" style="background: none; border: none; cursor: pointer; padding: 0;">
                    <svg viewBox="0 0 24 24" aria-hidden="true" role="img" class="icon" style="color: rgb(15, 20, 25); width: 24px; height: 24px;">
                        <path d="M3 12c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm9 2c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm7 0c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"></path>
                    </svg>
                </button>
                <div class="post-menu-content" style="display: none;">
                    @if (post.User.Id == currentUser.Id)
                    {
                        <button class="delete-post">Удалить</button>
                        <button class="">Еще одна заглушка</button>
                    }
                    else
                    {
                        <button class="">Заглушка</button>
                    }
                </div>
            </div>
        </div>
        <div class="post-content">
            <p>@post.Content</p>
        </div>
        <div class="post-actions">
            <div class="likes">
                <div class="like-actions-pic">
                    <img src="~/images/@(post.Likes.Any(l => l.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier)) ? "liked.svg" : "not-liked.svg")" height="30px" class="like-toggle" />
                </div>
                <span class="likes-count">@post.Likes.Count</span>
            </div>
            <div class="comments">
                <div class="comment-actions-pic">
                    <img src="~/images/comments.svg" height="30px" class="comment-toggle" />
                </div>
            </div>
        </div>
        <div class="post-comments">
            <div class="existing-comments">
                @if (post.Comments.Count > 0)
                {
                    <hr class="post-content-delimiter"/>
                    var comments = post.Comments.ToList();
                    for (int i = 0; i < comments.Count; i++)
                    {
                        var comment = comments[i];
                        <div class="comment" data-comment-id="@comment.Id">
                            <div class="comment-header">
                                <img class="comment-avatar" src="@(Url.Content(avatarsPath + comment.User.AvatarUrl) ?? defaultAvatarUrl)" alt="Фото профиля" onerror="this.onerror=null; this.src='@(defaultAvatarUrl)';" />
                                <div class="comment-info">
                                    <a class="username-link" data-user-id="@comment.User.Id">
                                        <span class="username">@comment.User.UserName</span>
                                    </a>
                                    <span class="created-at">@comment.CreatedAt.ToString("g")</span>
                                </div>
                            </div>
                            <div class="comment-content">
                                <p>@comment.Content</p>
                            </div>
                        </div>
                        if (i < comments.Count - 1)
                        {
                            <hr class="comments-delimiter" />
                        }
                    }
                }
            </div>
        </div>
    </div>
}
